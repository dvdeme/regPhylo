% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PartiFinder2.R
\name{PartiFinder2}
\alias{PartiFinder2}
\title{Estimate the best number of partitions and substitution model for each partition: wrapper for PartitionFinder2}
\usage{
PartiFinder2(input = NULL, Partition = NULL, codon = NULL,
  nexus.file = NULL, Path.PartiF2 = NULL, branchlengths = NULL,
  models = NULL, model_selection = NULL, search = NULL,
  Raxml = NULL, nthread = NULL, rcluster_percent = 10,
  rcluster_max = 1000)
}
\arguments{
\item{input}{the name (with the path, if necessary) of the input alignment in
fasta format.}

\item{Partition}{the name (with the path, if necessary) of the file
providing the gene partition of the alignment file. This file follows the RAxML
format, see \url{http://sco.h-its.org/exelixis/resource/download/NewManual.pdf}.}

\item{codon}{according to the file providing the gene partition in the alignment,
codon is the number of the row in this file corresponding to a coding gene that
will be split into first, second, and third codon positions, to prepare the
.cfg PartitionFinder2 inputfile.}

\item{nexus.file}{the name (with the path, if
necessary) of the concatenated nexus alignment.}

\item{Path.PartiF2}{path pointing to
where the file 'PartitionFinder.py' is installed (e.g.
'/home/davidpc/Programs/PartitionFinder2/partitionfinder-2.1.1/PartitionFinder.py').
Note: Apply to both Linux and Windows OS.}

\item{branchlengths}{'linked' or 'unlinked'.}

\item{models}{'all', 'allx', 'beast',
'mrbayes', 'gamma', 'gammai', '<list>'}

\item{model_selection}{'AIC','AICc','BIC'.}

\item{search}{'all', 'greedy','rcluster', 'rclusterf', 'hcluster', 'kmeans', 'user'.
Type of searching algorithms among the potential substitution models.}

\item{Raxml}{'TRUE', 'FALSE', PartitionFinder2 can use RAxML instead of PhyML to get a
quicker output, but RAxML implements only three substitution models GTR, GTR+G,
GTR+G+I, of the many more available in PhyML.}

\item{nthread}{number of threads used by PartitionFinder2 to run.}

\item{rcluster_percent}{See description for rcluster-max, below. (Default 10).}

\item{rcluster_max}{rcluster-max and rcluster-percent control
the thoroughness of the relaxed clustering algorithm together. Setting either
of them higher will tend to make the search more thorough and slower. Setting
them lower will tend to make the search quicker but less thorough. (Default 1000).}
}
\value{
The function returns:
\itemize{
\item 1) a new partition file in RAxML format according to the best
partition scheme proposed by PartitionFinder2 (=output file with a suffix
of '_PF2' and the name of the model used in PartitionFinder2),
\item 2) an alignment in nexus format with a new block at the end
describing the new partitions provided by PartitionFinder2
(=name of the input nexus file with
suffix '_PF2.nex'). This nexus file is ready to be read by BEAST2 for instance.
All the normal PartitionFinder2 outputs are stored in the folder called
'analysis'.
}
}
\description{
This function is a wrapper running PartitionFinder2 (Lanfear et al. 2017)
for a supermatrix (or concatenated alignment) to estimate the best
number of partitions and their best associated substitution models.
}
\details{
Using a fasta alignment and partition file following the
RAxML requirements (as exported by \code{\link{Align.Concat}} function) this function
prepares an alignment in phylip format ('.phy'), it builds a .cfg input file
describing the settings for PartitionFinder2 and calls the program.

"The rcluster algorithm works by finding the rcluster-max most similar
pairs of data blocks, OR the top rcluster-percent of similar datablocks, whichever
is smaller. It then calculates the information score (e.g. AICc) of all of these data
blocks and keeps the best one. Setting --rcluster-max to 1000 and --rcluster-percent
to 10 (i.e. the default values) is usually sufficient to ensure that PartitionFinder2 will
estimate a robust partitioning scheme, even on very large datasets in which
there may be millions of possible pairs of data blocks."
(\url{http://www.robertlanfear.com/partitionfinder/assets/Manual_v2.1.x.pdf})

For detailed descriptions about Partitionfinder2 options, see
\url{http://www.robertlanfear.com/partitionfinder/assets/Manual_v2.1.x.pdf}.

The function requires that PartitionFinder2 is installed and
the path of the python script "PartitionFinder.py" must be provided
for the Path.PartiF2 parameter.
Currently the function uses a temporary bash script to run Partitionfinder2
on Linux plateforms.

Online documentation and the download page are available at
\url{http://www.robertlanfear.com/partitionfinder/}. Installation instructions
 are provided in the PartitionFinder2 manual available at
\url{http://www.robertlanfear.com/partitionfinder/assets/Manual_v2.1.x.pdf}.
Download the source code from the Github page available at
\url{http://www.robertlanfear.com/partitionfinder/}.
Then copy and paste the archive into the desired folder, and extract (decompress) all the files.
WARNINGS: PartitionFinder requires Python 2.7.x or higher (but not 3.x!) and
dependencies including specific python libraries in order to run. All instructions
are provided in the manual, but we provide a simple procedure to avoid many hurdles below:
\itemize{
\item - Download python 2.7.15 from \url{https://www.python.org/downloads/release/python-2715/},
select the file appropriate for your OS. Install python 2.7.15 by double clicking on the installer
and follow the instructions (for Windows users, during the installation "Customize Python 2.7.15" allows
the option "Add python.exe to Path", but be careful if other version of python is already
installed and set-up in the path).
\item - Then, open the terminal (in Windows cmd.exe) and use the next set of commands
to install numpy, pandas, tables, pyparsing, scipy and sklearn python's libraries.
\itemize{ \item python -m pip install numpy
\item python -m pip install pandas
\item python -m pip install tables
\item python -m pip install pyparsing
\item python -m pip install scipy
\item python -m pip install sklearn
}
\item - To check if Partitionfinder2 was successfully installed open the terminal,
navigate to the folder storing the file PartitionFinder.py (you may need to change
directories), and run the following command
in order to see the help file. You should see several "help" options appear in your terminal.
PartitionFinder.py --help
}
}
\note{
\itemize{ \item 1) In some case users might need to install the "png" and "reticulate" R package,
 in order for python to run through R. This may be the case when the files
 "partition_finder.cfg" and "xxxx.phy" have been exported in your working directory
 and partitionfinder2 is working on your machine, but the following error message is
 printed "Error in file(con, "r") : cannot open the connection
In addition: Warning message:
In file(con, "r") :
 cannot open file 'analysis/best_scheme.txt': No such file or directory".
\item 2) Another point is that sometimes partitionFinder2 crashed in the middle of the run,
usually due to threading problems. So to re-run the function, all the files and folder
previously created by the \code{\link{PartiFinder2}} function must be remove ("partition_finder.cfg",
"xxxx.phy", and the folder called "analysis"), and we advise to use less threads.
}
}
\examples{
\dontrun{

# To run the example copy the input files
# provided by the package to a temporary directory created into the
# current working directory.
src.dir = system.file("extdata/multi.align/ForPartiFinder2", package = "regPhylo")
dir.create("TempDir.ForPartiFinder2")
# Set up the path to the TempDir folder.
dest.dir = paste(getwd(), "/TempDir.ForPartiFinder2", sep="")
file.names <- dir(src.dir)
# Copy all the files stored in regPhylo/extdata/multi.align/ForPartiFinder2"
# into a temporary folder.
sapply(file.names, function(x) {
file.copy(from = paste(src.dir, x, sep = "/"),
to = paste(dest.dir, x, sep = "/"),
overwrite = FALSE) })

input = "TempDir.ForPartiFinder2/Concat.fas"
Partition = "TempDir.ForPartiFinder2/Partitions_Concat.txt"
# Open the convtab.txt document to determine which genes need
# to be partitioned for the first, second, and third codon position.
read.delim("TempDir.ForPartiFinder2/convtab.txt", sep = "\\t", header = TRUE)

# Run the function using RAxML software, BIC criteria,
# the fast "rcluster" algorithm and the classic default parameters.
PartiFinder2(input = "TempDir.ForPartiFinder2/Concat.fas",
Partition = "TempDir.ForPartiFinder2/Partitions_Concat.txt",
codon = c(2:4), nexus.file = "TempDir.ForPartiFinder2/Concat.nex",
Path.PartiF2 = "/home/davidpc/Programs/PartitionFinder2/partitionfinder-2.1.1/PartitionFinder.py",
branchlengths = "linked", models = "all", model_selection = "BIC", search = "rcluster",
Raxml = "TRUE", nthread = 5, rcluster_percent = 10, rcluster_max = 1000)

# Detailed results of the analysis are stored in the newly created folder "analysis".
# The nexus file of the concatenated alignment (supermatrix) including the best
# partitioning scheme provided by PartitionFinder2 is called "Concat_PF2.nex",
# and the partition file compatible with RAxML is
# called "Partitions_Concat.txt_PF2_all.txt", and both are
# stored in the temporary directory "TempDir.ForPartiFinder2".

# To remove the files created while running the example do the following:
# Remove the folder "analysis".
unlink("analysis", recursive = TRUE)
# Remove the Temporary folder
unlink("TempDir.ForPartiFinder2", recursive = TRUE)

# Remove the files created by, or for, PartitionFinder2
file.remove("Concat.phy")
file.remove("log.txt")
file.remove("partition_finder.cfg")

}
}
\references{
Lanfear et al. 2017, DOI: 10.1093/molbev/msw260
}
